<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Talk with Dulariya - Chat Mode</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            background-color: #0a0e17;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #e0e0e0;
            background-image: linear-gradient(to bottom right, #0a0e17, #1a1f2c);
            background-attachment: fixed;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
            padding-bottom: 50px;
        }
        .page-title {
            text-align: center;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 600;
            font-size: 2.2rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            letter-spacing: 1px;
            position: relative;
            display: inline-block;
            padding-bottom: 10px;
        }
        .page-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, #2196F3, #E91E63);
            border-radius: 3px;
        }
        .nav-tabs {
            margin-bottom: 20px;
            justify-content: center;
            border-bottom: none;
            position: relative;
            z-index: 1;
        }
        .nav-tabs .nav-item {
            margin: 0 5px;
        }
        .nav-tabs .nav-link {
            color: #e0e0e0;
            font-weight: 500;
            border-radius: 30px;
            padding: 8px 20px;
            border: 1px solid transparent;
            transition: all 0.3s;
            background-color: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(5px);
        }
        .nav-tabs .nav-link:hover {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }
        .nav-tabs .nav-link.active {
            color: #fff;
            background-color: #2196F3;
            border-color: #2196F3;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
            transform: translateY(-2px);
        }
        .video-call-container {
            background-color: rgba(30, 30, 40, 0.9);
            border-radius: 24px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4), 0 5px 15px rgba(0, 0, 0, 0.3);
            padding: 30px;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
        }
        .video-call-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, #2196F3, #E91E63, #4CAF50);
            z-index: 1;
        }
        .gif-container {
            margin: 20px auto;
            width: 420px;
            height: 420px;
            position: relative;
            border-radius: 24px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            border: 4px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
            transform-style: preserve-3d;
            perspective: 1000px;
        }
        .gif-container:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5);
        }
        .gif-container img, .gif-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 20px;
            transition: all 0.4s ease;
        }
        .call-status-indicator {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: rgba(40, 167, 69, 0.85);
            color: white;
            padding: 8px 16px;
            border-radius: 30px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            transition: all 0.3s ease;
            letter-spacing: 0.5px;
        }
        .call-duration {
            position: absolute;
            top: 15px;
            left: 15px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 16px;
            border-radius: 30px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            letter-spacing: 1px;
        }
        .call-controls {
            display: flex;
            justify-content: center;
            margin: 25px 0;
            gap: 25px;
        }
        .call-control-btn {
            width: 65px;
            height: 65px;
            border-radius: 50%;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        .call-control-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: scale(0);
            transition: all 0.4s ease;
        }
        .call-control-btn:hover::before {
            transform: scale(1);
        }
        .call-control-btn:active {
            transform: scale(0.92);
        }
        .mic-btn {
            background-color: #4CAF50;
        }
        .mic-btn.active {
            background-color: #f44336;
            animation: pulse 1.5s infinite;
        }
        .mic-btn:hover {
            background-color: #43A047;
            transform: scale(1.08);
        }
        .end-call-btn {
            background-color: #f44336;
        }
        .end-call-btn:hover {
            background-color: #E53935;
            transform: scale(1.08);
        }
        .video-mode-btn {
            background-color: #2196F3;
        }
        .video-mode-btn:hover {
            background-color: #1E88E5;
            transform: scale(1.08);
        }
        .video-mode-btn.active {
            background-color: #1976D2;
            box-shadow: 0 0 0 4px rgba(33, 150, 243, 0.5);
        }
        .chat-input {
            margin: 25px auto;
            max-width: 600px;
            position: relative;
        }
        .chat-input form {
            display: flex;
            gap: 10px;
        }
        .chat-input input {
            border-radius: 30px;
            padding: 16px 25px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
            background-color: rgba(255, 255, 255, 0.08);
            color: #ffffff;
            font-size: 16px;
            width: 100%;
            transition: all 0.3s;
            backdrop-filter: blur(5px);
        }
        .chat-input input:focus {
            border-color: #2196F3;
            box-shadow: 0 6px 20px rgba(33, 150, 243, 0.25);
            background-color: rgba(255, 255, 255, 0.12);
            outline: none;
            transform: translateY(-2px);
        }
        .chat-input input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }
        .chat-input button {
            border-radius: 30px;
            padding: 12px 25px;
            background-color: #2196F3;
            border: none;
            color: white;
            font-weight: 600;
            box-shadow: 0 6px 15px rgba(33, 150, 243, 0.3);
            transition: all 0.3s;
            min-width: 100px;
        }
        .chat-input button:hover {
            background-color: #1E88E5;
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 8px 20px rgba(33, 150, 243, 0.4);
        }
        .chat-input button:active {
            transform: translateY(0) scale(0.98);
        }
        .status {
            margin: 20px auto;
            font-size: 16px;
            color: rgba(255, 255, 255, 0.9);
            padding: 12px 25px;
            border-radius: 15px;
            background-color: rgba(255, 255, 255, 0.08);
            display: inline-block;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-width: 80%;
            word-wrap: break-word;
            transition: all 0.3s ease;
        }
        .mode-indicator {
            position: absolute;
            top: -12px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #2196F3;
            color: white;
            padding: 6px 18px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            letter-spacing: 0.5px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7); }
            70% { box-shadow: 0 0 0 15px rgba(244, 67, 54, 0); }
            100% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0); }
        }
        .conversation-history {
            max-height: 250px;
            overflow-y: auto;
            margin: 20px auto;
            padding: 20px;
            background-color: rgba(0, 0, 0, 0.25);
            border-radius: 15px;
            text-align: left;
            display: none;
            box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.4s ease;
            backdrop-filter: blur(5px);
        }
        .conversation-history.show {
            display: block;
            animation: fadeIn 0.4s ease;
        }
        .conversation-history::-webkit-scrollbar {
            width: 8px;
        }
        .conversation-history::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }
        .conversation-history::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
        }
        .conversation-history::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        .message {
            margin-bottom: 15px;
            padding: 12px 18px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
            position: relative;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            animation: messageAppear 0.3s ease;
        }
        .user-message {
            background-color: rgba(33, 150, 243, 0.25);
            margin-left: auto;
            border-bottom-right-radius: 5px;
            text-align: right;
            border: 1px solid rgba(33, 150, 243, 0.3);
        }
        .aunt-message {
            background-color: rgba(76, 175, 80, 0.25);
            margin-right: auto;
            border-bottom-left-radius: 5px;
            border: 1px solid rgba(76, 175, 80, 0.3);
        }
        @keyframes messageAppear {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .gif-container {
                width: 320px;
                height: 320px;
            }
            .call-control-btn {
                width: 55px;
                height: 55px;
                font-size: 20px;
            }
            .chat-input button {
                min-width: 80px;
                padding: 12px 15px;
            }
        }
        @media (max-width: 576px) {
            .gif-container {
                width: 280px;
                height: 280px;
            }
            .call-control-btn {
                width: 50px;
                height: 50px;
                font-size: 18px;
            }
            .video-call-container {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="page-title">Talk with Dulariya</h1>
        
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link" href="/">Auto Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/manual">Manual Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/chat">Chat Mode</a>
            </li>
        </ul>
        
        <div class="video-call-container">
            <div class="mode-indicator" id="modeIndicator">Chat Mode</div>
            
            <div class="gif-container">
                <div class="call-status-indicator" id="callStatus">Connected</div>
                <div class="call-duration" id="callDuration">00:00</div>
                <img src="/images/aunt.png" alt="Dulariya" id="auntImage" style="display: block;">
                <video id="auntVideo" style="display: none; width: 100%; height: 100%; object-fit: cover; border-radius: 18px;">
                    <source src="/videos/aunt.mp4" type="video/mp4">
                </video>
            </div>

            <div class="call-controls">
                <button class="call-control-btn mic-btn" id="micBtn" title="Start/Stop Voice Input">
                    <i class="fas fa-microphone"></i>
                </button>
                <button class="call-control-btn video-mode-btn" id="videoModeBtn" title="Toggle Video Call Mode">
                    <i class="fas fa-video"></i>
                </button>
                <button class="call-control-btn end-call-btn" id="endCallBtn" title="End Call">
                    <i class="fas fa-phone-slash"></i>
                </button>
            </div>

            <div class="conversation-history" id="conversationHistory">
                <!-- Conversation messages will be added here dynamically -->
            </div>

            <div class="chat-input">
                <form id="chatForm" class="d-flex">
                    <input type="text" id="questionInput" class="form-control me-2" placeholder="Type your question here..." required>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i> Send
                    </button>
                </form>
            </div>

            <div class="status" id="status">Type your question or click the mic to speak</div>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const chatForm = document.getElementById('chatForm');
            const questionInput = document.getElementById('questionInput');
            const statusElement = document.getElementById('status');
            const callStatusElement = document.getElementById('callStatus');
            const callDurationElement = document.getElementById('callDuration');
            const modeIndicatorElement = document.getElementById('modeIndicator');
            const conversationHistoryElement = document.getElementById('conversationHistory');
            const auntImage = document.getElementById('auntImage');
            const auntVideo = document.getElementById('auntVideo');
            const micBtn = document.getElementById('micBtn');
            const videoModeBtn = document.getElementById('videoModeBtn');
            const endCallBtn = document.getElementById('endCallBtn');
            
            // State variables
            let isCallActive = true;
            let isVideoMode = false;
            let isSpeaking = false;
            let isListening = false;
            let recognition = null;
            let callDuration = 0;
            let callTimer = null;
            let conversationHistory = [];

            // Initialize the application
            initializeApp();

            function initializeApp() {
                initSpeechRecognition();
                startCallTimer();
                updateUIForMode();
            }

            function showSpeakingAvatar() {
                auntImage.style.display = 'none';
                auntVideo.style.display = 'block';
                auntVideo.currentTime = 0;
                auntVideo.loop = true;
                auntVideo.play();
                callStatusElement.textContent = 'Speaking...';
                callStatusElement.style.backgroundColor = 'rgba(33, 150, 243, 0.8)';
            }

            function showDefaultAvatar() {
                auntVideo.pause();
                auntVideo.currentTime = 0;
                auntVideo.style.display = 'none';
                auntImage.style.display = 'block';
                callStatusElement.textContent = isListening ? 'Listening...' : 'Connected';
                callStatusElement.style.backgroundColor = isListening ? 'rgba(244, 67, 54, 0.8)' : 'rgba(76, 175, 80, 0.8)';
            }

            // Initialize speech recognition
            function initSpeechRecognition() {
                if ('webkitSpeechRecognition' in window) {
                    recognition = new webkitSpeechRecognition();
                    recognition.continuous = false;
                    recognition.interimResults = false;
                    recognition.lang = 'en-US'; // Set to user's language

                    recognition.onstart = function() {
                        isListening = true;
                        statusElement.textContent = 'Listening to your question...';
                        callStatusElement.textContent = 'Listening...';
                        callStatusElement.style.backgroundColor = 'rgba(244, 67, 54, 0.8)';
                        micBtn.innerHTML = '<i class="fas fa-microphone-slash"></i>';
                        micBtn.classList.add('active');
                    };

                    recognition.onresult = function(event) {
                        const transcript = event.results[0][0].transcript;
                        questionInput.value = transcript;
                        statusElement.textContent = 'Processing your question...';
                        
                        // Auto submit the form with the transcript
                        setTimeout(() => {
                            chatForm.dispatchEvent(new Event('submit'));
                        }, 500);
                    };

                    recognition.onerror = function(event) {
                        console.error('Speech recognition error', event.error);
                        statusElement.textContent = 'Error: ' + event.error;
                        stopListening();
                    };

                    recognition.onend = function() {
                        stopListening();
                    };
                } else {
                    statusElement.textContent = 'Speech recognition not supported in this browser.';
                    micBtn.disabled = true;
                }
            }

            function startListening() {
                if (recognition && !isListening && isCallActive) {
                    recognition.start();
                }
            }

            function stopListening() {
                if (recognition && isListening) {
                    isListening = false;
                    recognition.stop();
                    micBtn.innerHTML = '<i class="fas fa-microphone"></i>';
                    micBtn.classList.remove('active');
                    if (!isSpeaking) {
                        callStatusElement.textContent = 'Connected';
                        callStatusElement.style.backgroundColor = 'rgba(76, 175, 80, 0.8)';
                    }
                }
            }

            function startCallTimer() {
                callTimer = setInterval(() => {
                    if (isCallActive) {
                        callDuration++;
                        updateCallDuration();
                    }
                }, 1000);
            }

            function updateCallDuration() {
                const minutes = Math.floor(callDuration / 60);
                const seconds = callDuration % 60;
                callDurationElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            function toggleVideoMode() {
                isVideoMode = !isVideoMode;
                updateUIForMode();
                
                if (isVideoMode) {
                    // In video mode, show conversation history and focus on voice input
                    conversationHistoryElement.classList.add('show');
                    videoModeBtn.classList.add('active');
                    statusElement.textContent = 'Video Call Mode: Click the mic to speak';
                    modeIndicatorElement.textContent = 'Video Call Mode';
                } else {
                    // In chat mode, hide conversation history
                    conversationHistoryElement.classList.remove('show');
                    videoModeBtn.classList.remove('active');
                    statusElement.textContent = 'Chat Mode: Type your question or click the mic';
                    modeIndicatorElement.textContent = 'Chat Mode';
                }
            }

            function updateUIForMode() {
                if (isVideoMode) {
                    // Show conversation history in video mode
                    conversationHistoryElement.classList.add('show');
                    videoModeBtn.classList.add('active');
                    modeIndicatorElement.textContent = 'Video Call Mode';
                } else {
                    conversationHistoryElement.classList.remove('show');
                    videoModeBtn.classList.remove('active');
                    modeIndicatorElement.textContent = 'Chat Mode';
                }
            }

            function addMessageToHistory(message, isUser) {
                // Create message element
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                messageElement.classList.add(isUser ? 'user-message' : 'aunt-message');
                messageElement.textContent = message;
                
                // Add to conversation history
                conversationHistoryElement.appendChild(messageElement);
                conversationHistoryElement.scrollTop = conversationHistoryElement.scrollHeight;
                
                // Store in history array
                conversationHistory.push({
                    text: message,
                    isUser: isUser,
                    timestamp: new Date()
                });
            }

            function endCall() {
                if (isCallActive) {
                    // End the call
                    isCallActive = false;
                    callStatusElement.textContent = 'Call Ended';
                    callStatusElement.style.backgroundColor = 'rgba(108, 117, 125, 0.8)';
                    stopListening();
                    window.speechSynthesis.cancel();
                    showDefaultAvatar();
                    statusElement.textContent = 'Call ended. Refresh to start a new call.';
                    clearInterval(callTimer);
                    
                    // Disable inputs
                    questionInput.disabled = true;
                    chatForm.querySelector('button').disabled = true;
                    micBtn.disabled = true;
                    videoModeBtn.disabled = true;
                    endCallBtn.innerHTML = '<i class="fas fa-phone"></i>';
                } else {
                    // Restart the call (refresh the page)
                    window.location.reload();
                }
            }

            // Handle form submission
            chatForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const question = questionInput.value.trim();
                if (!question || !isCallActive) return;

                // Add user message to history
                addMessageToHistory(question, true);

                // Disable input while processing
                questionInput.disabled = true;
                chatForm.querySelector('button').disabled = true;
                statusElement.textContent = 'Dulariya is thinking...';
                callStatusElement.textContent = 'Processing...';
                callStatusElement.style.backgroundColor = 'rgba(255, 193, 7, 0.8)';

                try {
                    const response = await fetch('/ask', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ question })
                    });

                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.details || data.error || 'Failed to get response');
                    }

                    // Add aunt's response to history
                    addMessageToHistory(data.response, false);

                    // Convert response to speech
                    const speech = new SpeechSynthesisUtterance(data.response);
                    speech.lang = 'hi-IN';
                    
                    // Get available voices and select a female Hindi voice
                    let voices = window.speechSynthesis.getVoices();
                    const hindiVoice = voices.find(voice => 
                        voice.lang.includes('hi') && voice.name.toLowerCase().includes('female')
                    ) || voices.find(voice => voice.lang.includes('hi')) || voices[0];
                    
                    speech.voice = hindiVoice;
                    speech.pitch = 1.1;  // Slightly higher pitch for female voice
                    speech.rate = 0.9;   // Slightly slower for better clarity
                    speech.volume = 1.0; // Full volume
                    
                    // When speech starts/ends
                    speech.onstart = function() {
                        isSpeaking = true;
                        showSpeakingAvatar();
                        statusElement.textContent = 'Dulariya is speaking...';
                    };
                    
                    speech.onend = function() {
                        isSpeaking = false;
                        showDefaultAvatar();
                        statusElement.textContent = isVideoMode ? 
                            'Click the mic to speak' : 
                            'Type your question or click the mic';
                        
                        // Re-enable input
                        questionInput.disabled = false;
                        chatForm.querySelector('button').disabled = false;
                        questionInput.value = '';
                        questionInput.focus();
                        
                        // If in video mode, automatically start listening again
                        if (isVideoMode && isCallActive) {
                            setTimeout(() => {
                                startListening();
                            }, 1000);
                        }
                    };
                    
                    window.speechSynthesis.speak(speech);
                } catch (error) {
                    console.error('Error:', error);
                    statusElement.textContent = `Error: ${error.message}`;
                    callStatusElement.textContent = 'Error';
                    callStatusElement.style.backgroundColor = 'rgba(244, 67, 54, 0.8)';
                    
                    // Re-enable input
                    questionInput.disabled = false;
                    chatForm.querySelector('button').disabled = false;
                }
            });

            // Event Listeners
            micBtn.addEventListener('click', function() {
                if (!isCallActive) return;
                
                if (isListening) {
                    stopListening();
                } else {
                    startListening();
                }
            });

            videoModeBtn.addEventListener('click', function() {
                if (!isCallActive) return;
                toggleVideoMode();
            });

            endCallBtn.addEventListener('click', function() {
                endCall();
            });

            // Initialize voices when the page loads
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = function() {
                    window.speechSynthesis.getVoices();
                };
            }

            // Auto-start video mode if URL has video parameter
            if (window.location.search.includes('video=true')) {
                toggleVideoMode();
                setTimeout(() => {
                    startListening();
                }, 1000);
            }
        });
    </script>
</body>
</html>