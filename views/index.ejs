<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Talk with Dulariya - Auto Mode</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            background-color: #0a0e17;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #e0e0e0;
            background-image: linear-gradient(to bottom right, #0a0e17, #1a1f2c);
            background-attachment: fixed;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
            padding-bottom: 50px;
        }
        .page-title {
            text-align: center;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 600;
            font-size: 2.2rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            letter-spacing: 1px;
            position: relative;
            display: inline-block;
            padding-bottom: 10px;
        }
        .page-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, #2196F3, #E91E63);
            border-radius: 3px;
        }
        .nav-tabs {
            margin-bottom: 20px;
            justify-content: center;
            border-bottom: none;
            position: relative;
            z-index: 1;
        }
        .nav-tabs .nav-item {
            margin: 0 5px;
        }
        .nav-tabs .nav-link {
            color: #e0e0e0;
            font-weight: 500;
            border-radius: 30px;
            padding: 8px 20px;
            border: 1px solid transparent;
            transition: all 0.3s;
            background-color: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(5px);
        }
        .nav-tabs .nav-link:hover {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }
        .nav-tabs .nav-link.active {
            color: #fff;
            background-color: #2196F3;
            border-color: #2196F3;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
            transform: translateY(-2px);
        }
        .video-call-container {
            background-color: rgba(30, 30, 40, 0.9);
            border-radius: 24px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.4), 0 5px 15px rgba(0, 0, 0, 0.3);
            padding: 30px;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
        }
        .video-call-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, #2196F3, #E91E63, #4CAF50);
            z-index: 1;
        }
        .gif-container {
            margin: 20px auto;
            width: 420px;
            height: 420px;
            position: relative;
            border-radius: 24px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            border: 4px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
            transform-style: preserve-3d;
            perspective: 1000px;
        }
        .gif-container:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.5);
        }
        .gif-container img, .gif-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 20px;
            transition: all 0.4s ease;
        }
        .call-status-indicator {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: rgba(40, 167, 69, 0.85);
            color: white;
            padding: 8px 16px;
            border-radius: 30px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            transition: all 0.3s ease;
            letter-spacing: 0.5px;
        }
        .call-duration {
            position: absolute;
            top: 15px;
            left: 15px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 16px;
            border-radius: 30px;
            font-size: 14px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            letter-spacing: 1px;
        }
        .call-controls {
            display: flex;
            justify-content: center;
            margin: 25px 0;
            gap: 25px;
        }
        .call-control-btn {
            width: 65px;
            height: 65px;
            border-radius: 50%;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        .call-control-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: scale(0);
            transition: all 0.4s ease;
        }
        .call-control-btn:hover::before {
            transform: scale(1);
        }
        .call-control-btn:active {
            transform: scale(0.92);
        }
        .call-btn {
            background-color: #4CAF50;
        }
        .call-btn:hover {
            background-color: #43A047;
            transform: scale(1.08);
        }
        .call-btn.connecting {
            background-color: #ffc107;
            animation: pulse 1.5s infinite;
        }
        .call-btn.listening {
            background-color: #f44336;
            animation: pulse 1.5s infinite;
        }
        .end-call-btn {
            background-color: #f44336;
        }
        .end-call-btn:hover {
            background-color: #E53935;
            transform: scale(1.08);
        }
        .status {
            margin: 20px auto;
            font-size: 16px;
            color: rgba(255, 255, 255, 0.9);
            padding: 12px 25px;
            border-radius: 15px;
            background-color: rgba(255, 255, 255, 0.08);
            display: inline-block;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-width: 80%;
            word-wrap: break-word;
            transition: all 0.3s ease;
        }
        .mode-indicator {
            position: absolute;
            top: -12px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #2196F3;
            color: white;
            padding: 6px 18px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: bold;
            z-index: 10;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            letter-spacing: 0.5px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7); }
            70% { box-shadow: 0 0 0 15px rgba(244, 67, 54, 0); }
            100% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0); }
        }
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .gif-container {
                width: 320px;
                height: 320px;
            }
            .call-control-btn {
                width: 55px;
                height: 55px;
                font-size: 20px;
            }
        }
        @media (max-width: 576px) {
            .gif-container {
                width: 280px;
                height: 280px;
            }
            .call-control-btn {
                width: 50px;
                height: 50px;
                font-size: 18px;
            }
            .video-call-container {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="page-title">Talk with Dulariya</h1>
        
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="/">Auto Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/manual">Manual Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/chat">Chat Mode</a>
            </li>
        </ul>
        
        <div class="video-call-container">
            <div class="mode-indicator" id="modeIndicator">Auto Mode</div>
            
            <div class="gif-container">
                <div class="call-status-indicator" id="callStatus">Connected</div>
                <div class="call-duration" id="callDuration">00:00</div>
                <img src="/images/aunt.png" alt="Dulariya" id="auntImage" style="display: block;">
                <video id="auntVideo" style="display: none; width: 100%; height: 100%; object-fit: cover; border-radius: 18px;">
                    <source src="/videos/aunt.mp4" type="video/mp4">
                </video>
            </div>

            <div class="call-controls">
                <button class="call-control-btn call-btn" id="callBtn" title="Start/Stop Voice Input">
                    <i class="fas fa-phone"></i>
                </button>
                <button class="call-control-btn end-call-btn" id="endCallBtn" title="End Call">
                    <i class="fas fa-phone-slash"></i>
                </button>
            </div>

            <div class="status" id="status">Click to start talking</div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const callBtn = document.getElementById('callBtn');
            const endCallBtn = document.getElementById('endCallBtn');
            const statusElement = document.getElementById('status');
            const callStatusElement = document.getElementById('callStatus');
            const callDurationElement = document.getElementById('callDuration');
            const modeIndicatorElement = document.getElementById('modeIndicator');
            const auntImage = document.getElementById('auntImage');
            const auntVideo = document.getElementById('auntVideo');
            
            // State variables
            let isCallActive = false;
            let isListening = false;
            let isSpeaking = false;
            let recognition = null;
            let callDuration = 0;
            let callTimer = null;

            // Initialize speech recognition
            function initSpeechRecognition() {
                if ('webkitSpeechRecognition' in window) {
                    recognition = new webkitSpeechRecognition();
                    recognition.continuous = true;  // Enable continuous recognition
                    recognition.interimResults = false;
                    recognition.lang = 'hi-IN'; // Hindi language

                    recognition.onstart = function() {
                        isListening = true;
                        callBtn.classList.add('listening');
                        statusElement.textContent = 'Listening...';
                        callStatusElement.textContent = 'Listening...';
                        callStatusElement.style.backgroundColor = 'rgba(244, 67, 54, 0.8)';
                    };

                    recognition.onresult = async function(event) {
                        const text = event.results[event.results.length - 1][0].transcript;
                        statusElement.textContent = `You said: ${text}`;
                        callStatusElement.textContent = 'Processing...';
                        callStatusElement.style.backgroundColor = 'rgba(255, 193, 7, 0.8)';
                        
                        try {
                            const response = await fetch('/ask', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ question: text })
                            });

                            const data = await response.json();
                            if (!response.ok) {
                                throw new Error(data.details || data.error || 'Failed to get response');
                            }

                            // Convert response to speech
                            const speech = new SpeechSynthesisUtterance(data.response);
                            speech.lang = 'hi-IN';
                            
                            // Get available voices and select a female Hindi voice
                            let voices = window.speechSynthesis.getVoices();
                            const hindiVoice = voices.find(voice => 
                                voice.lang.includes('hi') && voice.name.toLowerCase().includes('female')
                            ) || voices.find(voice => voice.lang.includes('hi')) || voices[0];
                            
                            speech.voice = hindiVoice;
                            speech.pitch = 1.1;  // Slightly higher pitch for female voice
                            speech.rate = 0.9;   // Slightly slower for better clarity
                            speech.volume = 1.0; // Full volume
                            
                            // When speech starts, show speaking avatar
                            speech.onstart = function() {
                                isSpeaking = true;
                                showSpeakingAvatar();
                                statusElement.textContent = 'Dulariya is speaking...';
                            };
                            
                            // When speech ends, show default avatar and automatically start listening again
                            speech.onend = function() {
                                isSpeaking = false;
                                showDefaultAvatar();
                                statusElement.textContent = 'Listening...';
                                // Small delay before starting to listen again
                                setTimeout(() => {
                                    if (!isListening && isCallActive) {
                                        recognition.start();
                                    }
                                }, 500);
                            };
                            
                            window.speechSynthesis.speak(speech);
                        } catch (error) {
                            console.error('Error:', error);
                            statusElement.textContent = `Error: ${error.message}`;
                            callStatusElement.textContent = 'Error';
                            callStatusElement.style.backgroundColor = 'rgba(244, 67, 54, 0.8)';
                            
                            // Restart listening after error
                            setTimeout(() => {
                                if (!isListening && isCallActive) {
                                    recognition.start();
                                }
                            }, 1000);
                        }
                    };

                    recognition.onend = function() {
                        isListening = false;
                        callBtn.classList.remove('listening');
                        
                        // Automatically restart recognition unless call is ended
                        if (isCallActive && !isSpeaking) {
                            setTimeout(() => {
                                recognition.start();
                            }, 500);
                        }
                        
                        if (!isSpeaking) {
                            callStatusElement.textContent = 'Connected';
                            callStatusElement.style.backgroundColor = 'rgba(76, 175, 80, 0.8)';
                        }
                    };

                    recognition.onerror = function(event) {
                        console.error('Speech recognition error:', event.error);
                        statusElement.textContent = `Error: ${event.error}`;
                        isListening = false;
                        callBtn.classList.remove('listening');
                        
                        // Restart listening after error if call is still active
                        if (isCallActive) {
                            setTimeout(() => {
                                recognition.start();
                            }, 1000);
                        }
                    };
                } else {
                    statusElement.textContent = 'Speech recognition not supported in this browser.';
                    callBtn.disabled = true;
                }
            }

            function showSpeakingAvatar() {
                auntImage.style.display = 'none';
                auntVideo.style.display = 'block';
                auntVideo.currentTime = 0;
                auntVideo.loop = true;
                auntVideo.play();
                callStatusElement.textContent = 'Speaking...';
                callStatusElement.style.backgroundColor = 'rgba(33, 150, 243, 0.8)';
            }
            
            function showDefaultAvatar() {
                auntVideo.pause();
                auntVideo.currentTime = 0;
                auntVideo.style.display = 'none';
                auntImage.style.display = 'block';
                if (!isSpeaking) {
                    callStatusElement.textContent = isListening ? 'Listening...' : 'Connected';
                    callStatusElement.style.backgroundColor = isListening ? 'rgba(244, 67, 54, 0.8)' : 'rgba(76, 175, 80, 0.8)';
                }
            }

            function startCallTimer() {
                callTimer = setInterval(() => {
                    if (isCallActive) {
                        callDuration++;
                        updateCallDuration();
                    }
                }, 1000);
            }

            function updateCallDuration() {
                const minutes = Math.floor(callDuration / 60);
                const seconds = callDuration % 60;
                callDurationElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            function startCall() {
                if (!isCallActive) {
                    isCallActive = true;
                    callBtn.classList.remove('stopped');
                    callBtn.classList.add('connecting');
                    statusElement.textContent = 'Connecting...';
                    callStatusElement.textContent = 'Connecting...';
                    callStatusElement.style.backgroundColor = 'rgba(255, 193, 7, 0.8)';
                    
                    // Reset and start call timer
                    callDuration = 0;
                    updateCallDuration();
                    startCallTimer();
                    
                    setTimeout(() => {
                        callBtn.classList.remove('connecting');
                        recognition.start();
                    }, 1000);
                } else if (isListening) {
                    // Pause listening temporarily
                    recognition.stop();
                    callBtn.classList.remove('listening');
                    statusElement.textContent = 'Paused - Click to resume';
                    callStatusElement.textContent = 'Paused';
                    callStatusElement.style.backgroundColor = 'rgba(108, 117, 125, 0.8)';
                }
            }

            function endCall() {
                if (isCallActive) {
                    // End the call
                    isCallActive = false;
                    isListening = false;
                    isSpeaking = false;
                    
                    // Stop recognition and speech
                    if (recognition) {
                        recognition.stop();
                    }
                    window.speechSynthesis.cancel();
                    
                    // Update UI
                    callBtn.classList.remove('listening');
                    callBtn.classList.remove('connecting');
                    callStatusElement.textContent = 'Call Ended';
                    callStatusElement.style.backgroundColor = 'rgba(108, 117, 125, 0.8)';
                    statusElement.textContent = 'Call ended. Refresh to start a new call.';
                    showDefaultAvatar();
                    
                    // Stop timer
                    clearInterval(callTimer);
                    
                    // Disable buttons
                    callBtn.disabled = true;
                    endCallBtn.disabled = true;
                } else {
                    // Restart the call (refresh the page)
                    window.location.reload();
                }
            }

            // Initialize the application
            initSpeechRecognition();

            // Event Listeners
            callBtn.addEventListener('click', startCall);
            endCallBtn.addEventListener('click', endCall);

            // Initialize voices when the page loads
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = function() {
                    window.speechSynthesis.getVoices();
                };
            }
        });
    </script>
</body>
</html>