<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Talk with Dulariya - Manual Mode</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container {
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }
        .gif-container {
            margin: 20px auto;
            width: 300px;
            height: 300px;
        }
        .gif-container img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            border-radius: 10px;
        }
        .call-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: #28a745;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .call-btn:hover {
            transform: scale(1.1);
        }
        .call-btn.connecting {
            background-color: #ffc107;
            animation: pulse 1.5s infinite;
        }
        .call-btn.listening {
            background-color: #dc3545;
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .status {
            margin-top: 20px;
            font-size: 18px;
            color: #666;
        }
        .nav-tabs {
            margin-bottom: 20px;
            justify-content: center;
        }
        .nav-tabs .nav-link {
            color: #495057;
            font-weight: 500;
        }
        .nav-tabs .nav-link.active {
            color: #007bff;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Talk with Dulariya</h1>
        
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link" href="/">Auto Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/manual">Manual Mode</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/chat">Chat Mode</a>
            </li>
        </ul>
        
        <div class="gif-container">
            <img src="/images/aunt.png" alt="Dulariya" id="auntImage" style="display: block;">
            <video id="auntVideo" style="display: none; width: 100%; height: 100%; object-fit: contain; border-radius: 10px;">
                <source src="/videos/aunt.mp4" type="video/mp4">
            </video>
        </div>

        <button id="callBtn" class="call-btn">
            <i class="fas fa-phone"></i>
        </button>

        <div class="status" id="status">Tap to start listening</div>

    </div>

    <script src="https://kit.fontawesome.com/your-font-awesome-kit.js"></script>
    <script>
        const auntImage = document.getElementById('auntImage');
        const auntVideo = document.getElementById('auntVideo');
        
        function showSpeakingAvatar() {
            auntImage.style.display = 'none';
            auntVideo.style.display = 'block';
            auntVideo.loop = true;
            auntVideo.play();
        }
        
        function showDefaultAvatar() {
            auntVideo.pause();
            auntVideo.currentTime = 0;
            auntVideo.style.display = 'none';
            auntImage.style.display = 'block';
        }
    </script>
    <script>
        const callBtn = document.getElementById('callBtn');
        const status = document.getElementById('status');
        let recognition;
        let isListening = false;
        let isSpeaking = false;

        // Initialize speech recognition
        if ('webkitSpeechRecognition' in window) {
            recognition = new webkitSpeechRecognition();
            recognition.continuous = false;  // Disable continuous recognition for manual mode
            recognition.interimResults = false;
            recognition.lang = 'hi-IN'; // Hindi language

            recognition.onstart = () => {
                isListening = true;
                callBtn.classList.add('listening');
                status.textContent = 'Listening...';
            };

            recognition.onresult = async (event) => {
                const text = event.results[event.results.length - 1][0].transcript;
                status.textContent = `You said: ${text}`;
                
                try {
                    const response = await fetch('/ask', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ question: text })
                    });

                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.details || data.error || 'Failed to get response');
                    }

                    // Convert response to speech
                    const speech = new SpeechSynthesisUtterance(data.response);
                    speech.lang = 'hi-IN';
                    
                    // Get available voices and select a female Hindi voice
                    let voices = window.speechSynthesis.getVoices();
                    const hindiVoice = voices.find(voice => 
                        voice.lang.includes('hi') && voice.name.toLowerCase().includes('female')
                    ) || voices.find(voice => voice.lang.includes('hi')) || voices[0];
                    
                    speech.voice = hindiVoice;
                    speech.pitch = 1.1;  // Slightly higher pitch for female voice
                    speech.rate = 0.9;   // Slightly slower for better clarity
                    speech.volume = 1.0; // Full volume
                    
                    // When speech starts, show speaking avatar
                    speech.onstart = () => {
                        isSpeaking = true;
                        showSpeakingAvatar();
                        status.textContent = 'Dulariya is speaking...';
                    };
                    
                    // When speech ends, show default avatar and reset the button to ready state
                    speech.onend = () => {
                        isSpeaking = false;
                        showDefaultAvatar();
                        callBtn.classList.remove('connecting');
                        status.textContent = 'Tap to start listening again';
                    };
                    
                    isSpeaking = true;
                    window.speechSynthesis.speak(speech);
                    status.textContent = 'Dulariya is speaking...';
                } catch (error) {
                    status.textContent = `Error: ${error.message}`;
                    isSpeaking = false;
                }
            };

            recognition.onend = () => {
                isListening = false;
                callBtn.classList.remove('listening');
                if (!isSpeaking) {
                    status.textContent = 'Tap to start listening again';
                }
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                status.textContent = `Error: ${event.error}`;
                isListening = false;
                callBtn.classList.remove('listening');
            };
        }

        callBtn.addEventListener('click', () => {
            // If already listening or speaking, do nothing
            if (isListening || isSpeaking) return;
            
            callBtn.classList.add('connecting');
            status.textContent = 'Connecting...';
            
            setTimeout(() => {
                callBtn.classList.remove('connecting');
                recognition.start();
            }, 1000);
        });
    </script>
</body>
</html>